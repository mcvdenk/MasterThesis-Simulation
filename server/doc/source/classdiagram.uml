@startuml
hide empty members
hide circle
skinparam linetype ortho

class Consumer {
    SOURCES: list(str)
    add_source(str source)
    check_prerequisites: dict
    consumer(str keyword, dict data): dict
    create_questionnaire(): dict
    create_test: dict
    learning_message(Instance instance): dict
    provide_learned_items(): dict
    provide_learning(): dict
    authenticate(str name): User
    validate(list(dict) responses) 
}

class ConceptMap {
    get_partial_map(edge): ConceptMap
    find_prerequisites(postreq, prereqs, sources): list(Edge)
    find_siblings(postreq, sources, partial_edges): list(Edge)
    find_nodes(): list(Node)
    to_dict(): dict
}

Consumer "0..*" o-- "1" ConceptMap : concept_map

class Node {
    label : str
}

ConceptMap "1" o-- "0..*" Node : nodes

class Edge {
    label : str
    source : str
}

ConceptMap "1" o-- "0..*" Edge : edges
Node "2" o-- "0..*" Edge : from, to

class Flashcard {
    source : str
    question : str
    answer : str
    response_model : list(str)
    to_dict() : dict
}

Edge "0..*" o-- "0..*" Flashcard : edge

class User {
    name : str
    birthdate : int
    flashmap_condition : bool
    read_sources : list(str)
    gender : str
    code : str
    add_new_instance(list(Flashcard, Edge) references) : Flashcard, Edge
    set_descriptives(str gender, DateTime birthdate, str code)
    create_test(list(Flashcard) flashcards, list(TestItem) items): dict(str, Response)
    append_test(list(dict) flashcard_responses, list(dict) item_responses)
    create_questionnaire(list(QuestionnaireItem) pu_items, list(QuestionnaireItem) peou_items): list(QuestionnaireItem)
    append_questionnaire(list(dict) responses, str good, str could_be_improved, str email)
    get_due_instance(): Instance
    get_instance_by_id(ObjectId instance_id): Instance
    start_response(Instance instance)
    validate(ObjectId instance_id, bool correct)
}

Consumer "1" o-- "1" User : user

class Logentry {
    timestamp : int
    keyword : str
    data : dict
}

Logentry "0..*" o-- "1" User : user

class Test {
    generate_test(items, prev_items) : list(items)
    append_flashcard(flashcard, answer) : void
    append_item(item, answer) : void
}

User "1" *-- "0..2" Test : test_flashcard_responses, test_item_responses

class TestItem {
    question : str
    source : str
    response_model : list(str)
}


class TestItemResponse {
    answer : str
}

Test "1" *-- "5" TestItemResponse : item_responses
TestItem "1" o-- "0..*" TestItemResponse : item

class TestFlashcardResponse {
    answer : str
}

Test "1" *-- "5" TestFlashcardResponse: flashcard_responses
Flashcard "1" o-- "0..*" TestFlashcardResponse : flashcard

class QuestionnaireItem {
    usefulness : bool
    positive_phrasing : str
    negative_phrasing : str
}

class Questionnaire {
    good : str
    can_be_improved : str
    append_answer(Questionnaireitem item, bool phrasing, str answer): void
}
    
User "1" *-- "0..1" Questionnaire : questionnaire

class QuestionnaireResponse {
    answer : int
    phrasing : bool
}

Questionnaire "1" *-- "0..*" QuestionnaireResponse : perceived_usefulness_items, perceived_ease_of_use_items
QuestionnaireItem "1" o-- "0..*" QuestionnaireResponse : item

abstract class Instance {
    due_date : int
    check_due(): bool
    finalise_response(bool correct)
    get_exponent(): int
    schedule() : void
    start_response()
}

User "1" *-- "0..*" Instance : instances

class FlashcardInstance

Instance <|.. FlashcardInstance
Flashcard "1" o-- "0..*" FlashcardInstance : flashcard

class FlashmapInstance

Instance <|.. FlashmapInstance
Edge "1" o-- "0..*" FlashmapInstance : edge

class Response {
    start : DateTime
    end : DateTime
    correct : bool
}

Instance "1" *-- "0..*" Response : responses

class Session {
    start : DateTime
    end : DateTime
    source_prompted : bool
    browser : str
    end_session(): void
}

User "1" *-- "0..*" Session : sessions

@enduml
